#!/usr/bin/env python3
import asyncio
from mavsdk import System

PORT = "/dev/ttyACM0"  # –∑–∞–º—ñ–Ω–∏, —è–∫—â–æ —ñ–Ω—à–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ /dev/ttyUSB0)

async def run():
    drone = System()
    try:
        await drone.connect(system_address=f"serial://{PORT}:115200")

        print("–û—á—ñ–∫—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
        async for state in drone.core.connection_state():
            if state.is_connected:
                print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∞–≤—Ç–æ–ø—ñ–ª–æ—Ç–∞")
                break

        # # –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è: –ø–æ–∑–∏—Ü—ñ—è
        # asyncio.create_task(print_position(drone))
        # # –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è: –≤–∏—Å–æ—Ç–∞
        # asyncio.create_task(print_altitude(drone))
        # # –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è: –±–∞—Ç–∞—Ä–µ—è
        asyncio.create_task(print_battery(drone))
        # # –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è: —Å—Ç–∞–Ω (ARM, —Ä–µ–∂–∏–º, –∑–¥–æ—Ä–æ–≤‚Äô—è —Å–µ–Ω—Å–æ—Ä—ñ–≤)
        # asyncio.create_task(print_status(drone))

        # –¢–µ–ª–µ–º–µ—Ç—Ä—ñ—è: —Å—Ç–∞–Ω (ARM, —Ä–µ–∂–∏–º, –∑–¥–æ—Ä–æ–≤‚Äô—è —Å–µ–Ω—Å–æ—Ä—ñ–≤)
        # asyncio.create_task(print_telemetry(drone))

        # —Ç—Ä–∏–º–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω–∏–º
        while True:
            await asyncio.sleep(1)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

async def print_position(drone):
    async for pos in drone.telemetry.position():
        print(f"üìç Lat={pos.latitude_deg:.6f}, Lon={pos.longitude_deg:.6f}")

async def print_altitude(drone):
    async for alt in drone.telemetry.relative_altitude_m():
        print(f"üìè Alt={alt:.1f} –º")

async def print_battery(drone):
    async for batt in drone.telemetry.battery():
        print(f"üîã {batt.remaining_percent*100:.1f}%  ({batt.voltage_v:.1f} V)")

async def print_status(drone):
    async for health in drone.telemetry.health():
        print(f"‚öôÔ∏è Health: {health}")

async def print_telemetry(drone):
    async for data in drone.telemetry:
        print(f"{data} \n")

if __name__ == "__main__":
    asyncio.run(run())
